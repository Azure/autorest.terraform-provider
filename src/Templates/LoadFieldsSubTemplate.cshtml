@using AutoRest.Core
@using AutoRest.Terraform
@using System.Collections.Generic
@using System.Diagnostics
@using System.Linq
@inherits TfProviderTemplateBase<(GoSDKTypedData Data, IEnumerable<GoSDKNonTerminalTypes> NonTermTypes, string Scope)>
@functions {
}
@{
    Debug.Assert(Model.Data != null && Model.NonTermTypes != null && Model.Scope != null);

    if (!Model.NonTermTypes.Any())
    {
        if (Model.Data.GoType.Terminal != GoSDKTerminalTypes.Complex)
        {

@:@(Indentation)@(string.IsNullOrEmpty(Model.Scope) ? string.Empty : Model.Scope + ".")@(Model.Data.Name) @(string.IsNullOrEmpty(Model.Scope) ? ":=" : "=") @@PARENT@@["@(Model.Data.BackingField.Name)"].(?)

        }
        else
        {

@:@(Indentation)@(string.IsNullOrEmpty(Model.Scope) ? string.Empty : Model.Scope + ".")@(Model.Data.Name) := &@(Model.Data.GoType.OriginalTerminalType.Name){}

            foreach (var prop in Model.Data.Properties)
            {

@:@(Include<LoadFieldsSubTemplate, (GoSDKTypedData, IEnumerable<GoSDKNonTerminalTypes>, string)>((prop, prop.GoType.Chain, (string.IsNullOrEmpty(Model.Scope) ? string.Empty : Model.Scope + ".") + Model.Data.Name)))

            }
        }
    }
    else
    {
        var nonTermType = Model.NonTermTypes.First();

        switch (nonTermType)
        {
            case GoSDKNonTerminalTypes.Array:

@:@(Indentation)@(string.IsNullOrEmpty(Model.Scope) ? string.Empty : Model.Scope + ".")@(Model.Data.Name) := []?
@:@(Indentation)for _, @(Model.Data.Name)_schema_item := range @@PARENT@@["@(Model.Data.BackingField.Name)"].([]interface{}) {

                Indentation.Indent();

@:@(Include<LoadFieldsSubTemplate, (GoSDKTypedData, IEnumerable<GoSDKNonTerminalTypes>, string)>((Model.Data, Model.NonTermTypes.Skip(1), string.Empty)))
@:@(Indentation)@(Model.Scope)@(Model.Data.Name) = append(@(Model.Scope)@(Model.Data.Name), @(Model.Data.Name)_array_item)

                Indentation.Outdent();

@:@(Indentation)}

                break;
            case GoSDKNonTerminalTypes.StringMap:
                Indentation.Indent();

@:@(Indentation)// MAP IS NOT IMPLEMENTED YET

                Indentation.Outdent();
                break;
        }
    }
}