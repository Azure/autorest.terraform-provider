@using AutoRest.Terraform
@using AutoRest.Terraform.Templates
@using System.Collections.Generic
@using System.Linq
@inherits TfProviderTemplateBase<TfFunctionGeneratorBase>

func @(Model.FunctionName)(d *@(ReferencePackage("schema")).ResourceData, meta interface{}) error {
@{
    Indentation.Indent();

@:@(Indentation)client := meta.(*ArmClient).@Model.GoSDKClientName
@:@(Indentation)ctx := meta.(*ArmClient).StopContext
@EmptyLine

    foreach (var invocation in Model.Invocations)
    {
        var fieldDefs = new Stack<IDictionary<string, string>>();
        fieldDefs.Push(new Dictionary<string, string>());
        foreach (var arg in invocation.ArgumentsRoot.Children)
        {
@:@(Include<FieldsToSDKSubTemplate, (GoSDKTypedData, GoSDKTypeChain, string, Stack<IDictionary<string, string>>)>((arg, arg.GoType, null, fieldDefs)))
        }

        var resultVarName = (invocation.IsAsync ? "future" : (invocation.SkipResult ? "_" : "response"));

@EmptyLine
@:@(Indentation)@(resultVarName), err := client.@(invocation.OriginalMethod.Name)(ctx, @(string.Join(", ", invocation.ArgumentsRoot.Children.Select(arg => arg.Name))))
@:@(Indentation)if err != nil {
        Indentation.Indent();
@:@(Indentation)return @(ReferencePackage("fmt")).Errorf("@(Model.ResourceName) @(invocation.Category.ToString().ToLowerInvariant()) error: %+v", err)
        Indentation.Outdent();
@:@(Indentation)}

        if (invocation.IsAsync)
        {

@:@(Indentation)err = future.WaitForCompletion(ctx, client.Client)
@:@(Indentation)if err != nil {
        Indentation.Indent();
@:@(Indentation)return @(ReferencePackage("fmt")).Errorf("@(Model.ResourceName) @(invocation.Category.ToString().ToLowerInvariant()) future wait for completion error: %+v", err)
        Indentation.Outdent();
@:@(Indentation)}

            if (!invocation.SkipResult)
            {

@:@(Indentation)response, err := future.Result(client)
@:@(Indentation)if err != nil {
        Indentation.Indent();
@:@(Indentation)return @(ReferencePackage("fmt")).Errorf("@(Model.ResourceName) @(invocation.Category.ToString().ToLowerInvariant()) future result error: %+v", err)
        Indentation.Outdent();
@:@(Indentation)}

            }
        }

@EmptyLine

        if (invocation.ShouldSetId)
        {
@:@(Indentation)d.SetId(*response.ID)
@EmptyLine
        }

        fieldDefs.Clear();
        fieldDefs.Push(new Dictionary<string, string>());
        foreach (var respStatus in invocation.ResponsesRoot.Children)
        {
            foreach (var resp in respStatus.Children)
            {
@:@(Include<SDKToFieldsSubTemplate, (GoSDKTypedData, GoSDKTypeChain, string, Stack<IDictionary<string, string>>)>((resp, resp.GoType, "response.", fieldDefs)))
            }
        }
    }

@EmptyLine
@:@(Indentation)return nil

    Indentation.Outdent();
}
}
@EmptyLine