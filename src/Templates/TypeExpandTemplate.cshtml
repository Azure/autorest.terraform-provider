@using AutoRest.Core
@using AutoRest.Terraform
@inherits Template<TypeExpandGenerator>

@foreach (var complexType in Model.ComplexTypesToExpand)
{
@:func @(Model.GetExpandFunctionName(complexType.Key))(u []interface{}) *hdinsight.@complexType.Key {
	@:if len(u) != 1 {
		@:return nil
	@:}
	@:v := u[0].(map[string]interface{})
	@:return &hdinsight.@complexType.Key {
    foreach (var field in complexType)
    {
        if (field.GoType == "COMPLEX")
        {
		@:@field.Name: @(Model.GetExpandFunctionName(field.Type))(v["@field.TfName"].([]interface{})),
        }
        else if (field.GoType == "MAP")
        {
		@:@field.Name: expandTags(v["@field.TfName"].(map[string]interface{})),
        }
        else if (field.GoType == "ARRAY")
        {
		@:@field.Name: @(Model.GetExpandArrayFunctionName(field.Name))(v["@field.TfName"].([]interface{})),
        }
        else
        {
		@:@field.Name: utils.@(field.GoType == "string" ? "String" : field.GoType == "int32" ? "Int32" : field.GoType == "bool" ? "Bool" : "UNSUPPORTED")(v["@field.TfName"].(@field.GoType)),
        }
    }
	@:}
@:}
@EmptyLine
}

@foreach (var arrayType in Model.ArrayTypesToExpand)
{
@:func @(Model.GetExpandArrayFunctionName(arrayType.Name))(u []interface{}) *[]@(arrayType.Type == "string" ? "string" : $"hdinsight.{arrayType.Type}") {
	@:v := []@(arrayType.Type == "string" ? "string" : $"hdinsight.{arrayType.Type}"){}
	@:for _, i := range u {
    if (arrayType.Type == "string")
    {
		@:v = append(v, i.(string))
    }
    else
    {
		@:v = append(v, *@(Model.GetExpandFunctionName(arrayType.Type))(i.([]interface{})))
    }
	@:}
	@:return &v
@:}
@EmptyLine
}
@EmptyLine