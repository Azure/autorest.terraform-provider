@using AutoRest.Terraform
@using AutoRest.Terraform.Templates
@using System.Collections.Generic
@using System.Diagnostics
@using System.Linq
@inherits TfProviderTemplateBase<(GoSDKTypedData Data, IEnumerable<GoSDKNonTerminalTypes> NonTermTypes, string Scope, Stack<IDictionary<string, string>> FieldDefs)>
@functions{
    private string GetSDKFieldVarName() => CodeNamer.GetAzureRmPropPathLocalVarName(Model.Data.PropertyPath.SplitPathStrings().Skip(1));
    private (string Target, string AssignOp) GetTargetAndOperation()
        => !string.IsNullOrEmpty(Model.Scope) ? (Model.Scope + "." + Model.Data.Name, "=") : (GetSDKFieldVarName(), ":=");
    private (string IteratorKeyVarName, string IteratorVarName, string ItemValueVarName, string SDKFieldVarName) GetNonTerminalVariableNames()
    {
        var ntCount = Model.NonTermTypes.Count() - 1;
        var postFix = (ntCount > 0 ? ntCount.ToString() : string.Empty);
        var field = "p" + CodeNamer.GetAzureRmFieldLocalVarName(Model.Data.BackingField) + postFix;
        var iterator = field + "___item";
        var iteratorKey = (Model.NonTermTypes.First() == GoSDKNonTerminalTypes.StringMap ? field + "___key" : "_");
        return (iteratorKey, iterator, field + "___value", GetSDKFieldVarName());
    }
    private string IncludeLoadFields(TfProviderField field, string target)
=> Include<LoadFieldsDefSubTemplate, (TfProviderField, string, Stack<IDictionary<string, string>>)>((field, target, Model.FieldDefs));
    private string IncludeSelf(GoSDKTypedData data, IEnumerable<GoSDKNonTerminalTypes> nonTerms, string scope)
        => Include<FieldsToSDKSubTemplate, (GoSDKTypedData, IEnumerable<GoSDKNonTerminalTypes>, string, Stack<IDictionary<string, string>>)>(
            (data, nonTerms, scope, Model.FieldDefs));
}
@{
    Debug.Assert(Model.Data != null && Model.NonTermTypes != null && Model.Scope != null);

    var (target, assignOp) = GetTargetAndOperation();
    if (!Model.NonTermTypes.Any())
    {
        if (Model.Data.GoType.Terminal != GoSDKTerminalTypes.Complex)
        {
@:@(IncludeLoadFields(Model.Data.BackingField, target + " " + assignOp + " {0}"))
        }
        else
        {
@:@(Indentation)@(target) @(assignOp) &@(Model.Data.GoType.OriginalTerminalType.Name){}
            foreach (var prop in Model.Data.Properties)
            {
@:@(IncludeSelf(prop, prop.GoType.Chain, target))
            }
        }
    }
    else
    {
        var nonTermsLeft = Model.NonTermTypes.Skip(1);
        var (keyVarName, iteratorVarName, valueVarName, sdkVarName) = GetNonTerminalVariableNames();

@:@(Indentation)@(target) @(assignOp) &[]interface{} / &map[string]interface{}
@:@(IncludeLoadFields(Model.Data.BackingField, $"for {keyVarName}, {iteratorVarName} := range {{0}}"))

        Indentation.Indent();
        Model.FieldDefs.Push(new Dictionary<string, string>());
        if (nonTermsLeft.Any() || Model.Data.GoType.Terminal == GoSDKTerminalTypes.Complex)
        {
@:@(Indentation)@(valueVarName) := @(iteratorVarName).(?)
            Model.FieldDefs.Peek().Add(Model.Data.BackingField.PropertyPath, valueVarName);
@:@(IncludeSelf(Model.Data, nonTermsLeft, string.Empty))
        }
        else
        {
@:@(Indentation)@(sdkVarName) := @(iteratorVarName).(?)
        }

        switch (Model.NonTermTypes.First())
        {
            case GoSDKNonTerminalTypes.Array:
@:@(Indentation)@(target) = append(@(target), @(sdkVarName))
                break;
            case GoSDKNonTerminalTypes.StringMap:
@:@(Indentation)@(target)[@(iteratorVarName)] = @(sdkVarName)
                break;
        }

        Model.FieldDefs.Pop();
        Indentation.Outdent();

@:@(Indentation)}

    }
}