@using AutoRest.Terraform
@using AutoRest.Terraform.Templates
@using System.Collections.Generic
@using System.Diagnostics
@using System.Linq
@inherits TfProviderTemplateBase<(GoSDKTypedData Data, GoSDKTypeChain Type, string Scope, Stack<IDictionary<string, string>> FieldDefs)>
@functions{
    private string GetSDKFieldVarName() => CodeNamer.GetAzureRmPropPathLocalVarName(Model.Data);
    private (string Target, string AssignOp) GetTargetAndOperation()
        => !string.IsNullOrEmpty(Model.Scope) ? (Model.Scope + "." + Model.Data.Name, "=") : (GetSDKFieldVarName(), ":=");
    private string GetNonTerminalBaseVariableName()
    {
        var ntCount = Model.Data.GoType.Chain.Count() - Model.Type.Chain.Count();
        var postfix = (ntCount > 0 ? ntCount.ToString() : string.Empty);
        return CodeNamer.GetAzureRmPropPathLocalVarBaseName(Model.Data.BackingField) + postfix;
    }
    private string TypeToString(GoSDKTypeChain type, string format)
        => Include<GoSDKTypeChainToString, (GoSDKTypeChain, string)>((type, format));
    private string IncludeLoadFields(TfProviderField field, string target)
        => Include<LoadFieldsDefSubTemplate, (TfProviderField, string, Stack<IDictionary<string, string>>)>((field, target, Model.FieldDefs));
    private string IncludeSelf(GoSDKTypedData data, GoSDKTypeChain type, string scope)
        => Include<FieldsToSDKSubTemplate, (GoSDKTypedData, GoSDKTypeChain, string, Stack<IDictionary<string, string>>)>(
            (data, type, scope, Model.FieldDefs));
}
@{
    Debug.Assert(Model.Data != null && Model.Type != null);

    var isTopLevel = (Model.Scope == null);
    var isIntermediate = (Model.Type.Chain.Count() < Model.Data.GoType.Chain.Count());
    var typeOverride = (ReferenceEquals(Model.Data.GoType, Model.Type) ? Model.Data.GenerateType : null);
    var (target, assignOp) = GetTargetAndOperation();
    if (!Model.Type.Chain.Any())
    {
        if (Model.Type.IsSimple)
        {
            var formatString = (isTopLevel ? "{0}" : $"{TypeToString(Model.Type, "sdk-convert")}({{0}})");
@:@(IncludeLoadFields(Model.Data.BackingField, $"{target} {assignOp} {formatString}"))
            if (Model.Data.BackingField.MightBeEmpty)
            {
                Indentation.Outdent();
@:@(Indentation)}
            }
        }
        else
        {
@:@(Indentation)@(target) @(assignOp) @(isTopLevel ? string.Empty : "&")@(TypeToString(typeOverride ?? Model.Type, "sdk")){}
            foreach (var prop in Model.Data.Properties)
            {
@:@(IncludeSelf(prop, prop.GoType, target))
            }
        }
    }
    else
    {
        var valueType = Model.Type.StripNonTerminal();
        var baseVarName = GetNonTerminalBaseVariableName();
        var sdkVarName = GetSDKFieldVarName();
        var isArray = Model.Type.Chain.First() == GoSDKNonTerminalTypes.Array;

        var tempName = "tmpParamOf" + baseVarName;
        var keyVarName = (isArray ? "_" : "tmpParamKeyOf" + baseVarName);
        var itrVarName = "tmpParamItemOf" + baseVarName;
        var valVarName = "tmpParamValueOf" + baseVarName;

@:@(IncludeLoadFields(Model.Data.BackingField,
    $"{tempName} := make({TypeToString(typeOverride ?? Model.Type, "sdk")}{(isArray ? ", 0" : string.Empty)})\r\n".EscapeFormatString() +
    $"for {keyVarName}, {itrVarName} := range {{0}}")) {

        Indentation.Indent();
        Model.FieldDefs.Push(new Dictionary<string, string>());
        if (!valueType.IsSimple)
        {
@:@(Indentation)@(valVarName) := @(itrVarName).(@(TypeToString(valueType, "tf")))
            Model.FieldDefs.Peek().Add(Model.Data.BackingField.PropertyPath, valVarName);
@:@(IncludeSelf(Model.Data, valueType, string.Empty))
        }
        else
        {
@:@(Indentation)@(sdkVarName) := @(TypeToString(valueType, "sdk-convert"))(@(itrVarName).(@(TypeToString(valueType, "tf"))))
        }

        switch (Model.Type.Chain.First())
        {
            case GoSDKNonTerminalTypes.Array:
@:@(Indentation)@(tempName) = append(@(tempName), *@(sdkVarName))
                break;
            case GoSDKNonTerminalTypes.StringMap:
@:@(Indentation)@(tempName)[@(keyVarName)] = @(sdkVarName)
                break;
        }

        Model.FieldDefs.Pop();
        Indentation.Outdent();

@:@(Indentation)}
@:@(Indentation)@(target) @(assignOp) &@(tempName)

        if (!isIntermediate && Model.Data.BackingField.MightBeEmpty)
        {
            Indentation.Outdent();
@:@(Indentation)}
        }

    }
}