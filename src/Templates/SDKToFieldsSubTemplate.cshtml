@using AutoRest.Terraform
@using AutoRest.Terraform.Templates
@using System.Collections.Generic
@using System.Diagnostics
@using System.Linq
@inherits TfProviderTemplateBase<(GoSDKTypedData Data, GoSDKTypeChain Type, string Scope, Stack<IDictionary<string, string>> FieldDefs)>
@functions{
    private string GetNewScope(string scope) => (scope + (Model.Data.GoType.Chain.Count() == 0 ? Model.Data.Name : string.Empty)).TrimEnd('.') + ".";
    private string GetNonTerminalBaseVariableName(GoSDKTypeChain targetChain = null)
    {
        var ntCount = Model.Data.GoType.Chain.Count() - (targetChain?.Chain ?? Model.Type.Chain).Count();
        var postfix = (ntCount > 0 ? ntCount.ToString() : string.Empty);
        return CodeNamer.GetAzureRmPropPathLocalVarBaseName(Model.Data.BackingField) + postfix;
    }
    private string TypeToString(GoSDKTypeChain type, string format)
        => Include<GoSDKTypeChainToString, (GoSDKTypeChain, string)>((type, format));
    private string IncludeStoreFields(TfProviderField field, string value)
    => Include<StoreFieldsDefSubTemplate, (TfProviderField, string, Stack<IDictionary<string, string>>)>((field, value, Model.FieldDefs));
    private string IncludeSelf(GoSDKTypedData data, GoSDKTypeChain type, string scope)
        => Include<SDKToFieldsSubTemplate, (GoSDKTypedData, GoSDKTypeChain, string, Stack<IDictionary<string, string>>)>(
            (data, type, scope, Model.FieldDefs));
}
@{
    Debug.Assert(Model.Data != null && Model.Type != null && Model.Scope != null);

    var isIntermediate = (Model.Type.Chain.Count() < Model.Data.GoType.Chain.Count());
    var noFieldAccess = isIntermediate && Model.Type.Chain.Count() > 0;
    var noIndirection = (Model.Type.IsSimple && Model.Type.Terminal == GoSDKTerminalTypes.Enum);
    var value = (noIndirection ? string.Empty : "*") + Model.Scope + (noFieldAccess ? $"(*{TypeToString(Model.Type, "sdk")})" : Model.Data.Name);
    var mightBeEmpty = !Model.Data.OriginalVariable.IsRequired && !noIndirection && !isIntermediate;
    var isArray = Model.Type.Chain.Any() && Model.Type.Chain.First() == GoSDKNonTerminalTypes.Array;
    if (mightBeEmpty)
    {
@:@(Indentation)if @(value.Substring(1)) != nil @(isArray ? $"&& len({value}) > 0 " : string.Empty){
        Indentation.Indent();
    }

    if (!Model.Type.Chain.Any())
    {
        if (Model.Data.GoType.Terminal != GoSDKTerminalTypes.Complex)
        {
@:@(IncludeStoreFields(Model.Data.BackingField, value))
        }
        else
        {
            foreach (var prop in Model.Data.Properties)
            {
@:@(IncludeSelf(prop, prop.GoType, GetNewScope(Model.Scope)))
            }
        }
    }
    else
    {
        var valueType = Model.Type.StripNonTerminal();
        var baseVarName = GetNonTerminalBaseVariableName();

        var tempName = "tmpRespOf" + baseVarName;
        var keyVarName = (isArray ? "_" : "tmpRespKeyOf" + baseVarName);
        var itrVarName = "tmpRespItemOf" + baseVarName;
        var valVarName = "tmpRespValueOf" + baseVarName;

@:@(Indentation)@(tempName) := make(@(TypeToString(Model.Type, "tf"))@(isArray ? ", 0" : string.Empty))
@:@(Indentation)for @(keyVarName), @(itrVarName) := range @(value) {

        Indentation.Indent();
        Model.FieldDefs.Push(new Dictionary<string, string>());
        Model.FieldDefs.Peek().Add(Model.Data.BackingField.PropertyPath, valVarName);
        if (!valueType.IsSimple)
        {
            if (!valueType.Chain.Any())
            {
@:@(Indentation)@(valVarName) := make(map[string]interface{})
            }
            else
            {
                valVarName = "tmpRespOf" + GetNonTerminalBaseVariableName(valueType);
            }
@:@(IncludeSelf(Model.Data, valueType, GetNewScope(itrVarName)))
        }
        else
        {
@:@(Indentation)@(valVarName) := @(isArray ? string.Empty : "*")@(itrVarName)
        }

        switch (Model.Type.Chain.First())
        {
            case GoSDKNonTerminalTypes.Array:
@:@(Indentation)@(tempName) = append(@(tempName), @(valVarName))
                break;
            case GoSDKNonTerminalTypes.StringMap:
@:@(Indentation)@(tempName)[@(keyVarName)] = @(valVarName)
                break;
        }

        Model.FieldDefs.Pop();
        Indentation.Outdent();

@:@(Indentation)}

        if (!isIntermediate)
        {
@:@(IncludeStoreFields(Model.Data.BackingField, tempName))
        }

    }

    if (mightBeEmpty)
    {
        Indentation.Outdent();
@:@(Indentation)}
    }
}