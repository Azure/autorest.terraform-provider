@using AutoRest.Terraform
@using AutoRest.Terraform.Templates
@using System.Collections.Generic
@using System.Diagnostics
@using System.Linq
@inherits TfProviderTemplateBase<(GoSDKTypedData Data, IEnumerable<GoSDKNonTerminalTypes> NonTermTypes, string Scope, Stack<IDictionary<string, string>> FieldDefs)>
@functions{
    private string GetNewScope(string scope) => (scope + (Model.Data.GoType.Chain.Count == 0 ? Model.Data.Name : string.Empty)).TrimEnd('.') + ".";
    private (string FieldVarName, string IteratorVarName, string ItemValueVarName) GetNonTerminalVariableNames(int ntCount)
    {
        var field = "r" + CodeNamer.GetAzureRmFieldLocalVarName(Model.Data.BackingField) + (ntCount > 0 ? ntCount.ToString() : string.Empty);
        var iterator = CodeNamer.GetAzureRmPropPathLocalVarName(Model.Data.PropertyPath.SplitPathStrings().Skip(1)) + (ntCount > 0 ? ntCount.ToString() : string.Empty);
        return (field, iterator, field + "___value");
    }
    private string IncludeStoreFields(TfProviderField field, string value)
        => Include<StoreFieldsDefSubTemplate, (TfProviderField, string, Stack<IDictionary<string, string>>)>((field, value, Model.FieldDefs));
    private string IncludeSelf(GoSDKTypedData d, IEnumerable<GoSDKNonTerminalTypes> nt, string s)
        => Include<SDKToFieldsSubTemplate, (GoSDKTypedData, IEnumerable<GoSDKNonTerminalTypes>, string, Stack<IDictionary<string, string>>)>((d, nt, s, Model.FieldDefs));
}
@{
    Debug.Assert(Model.Data != null && Model.NonTermTypes != null && Model.Scope != null);

    var value = "*" + Model.Scope + Model.Data.Name;
    if (!Model.NonTermTypes.Any())
    {
        if (Model.Data.GoType.Terminal != GoSDKTerminalTypes.Complex)
        {
@:@(IncludeStoreFields(Model.Data.BackingField, value))
        }
        else
        {
            foreach (var prop in Model.Data.Properties)
            {
@:@(IncludeSelf(prop, prop.GoType.Chain, GetNewScope(Model.Scope)))
            }
        }
    }
    else
    {
        var nonTermsLeft = Model.NonTermTypes.Skip(1);
        var (fieldVarName, iteratorVarName, valueVarName) = GetNonTerminalVariableNames(nonTermsLeft.Count());
        var keyVarName = Model.NonTermTypes.First() == GoSDKNonTerminalTypes.StringMap ? fieldVarName + "___key" : "_";

@:@(Indentation)@(fieldVarName) := make([]interface{} / map[string]string?)
@:@(Indentation)for @(keyVarName), @(iteratorVarName) := range @(value) {

        Indentation.Indent();
        Model.FieldDefs.Push(new Dictionary<string, string>());
        Model.FieldDefs.Peek().Add(Model.Data.BackingField.PropertyPath, valueVarName);
        if (nonTermsLeft.Any() || Model.Data.GoType.Terminal == GoSDKTerminalTypes.Complex)
        {
@:@(Indentation)@(valueVarName) := make(map[string]interface{})
@:@(IncludeSelf(Model.Data, nonTermsLeft, GetNewScope(iteratorVarName)))
        }
        else
        {
@:@(Indentation)@(valueVarName) := @(iteratorVarName).(?)
        }

        switch (Model.NonTermTypes.First())
        {
            case GoSDKNonTerminalTypes.Array:
@:@(Indentation)@(fieldVarName) = append(@(fieldVarName), @(valueVarName))
                break;
            case GoSDKNonTerminalTypes.StringMap:
@:@(Indentation)@(fieldVarName)[@(keyVarName)] = *@(valueVarName)
                break;
        }

        Model.FieldDefs.Pop();
        Indentation.Outdent();

@:@(Indentation)}
@:@(IncludeStoreFields(Model.Data.BackingField, fieldVarName))

    }
}