@using AutoRest.Terraform
@using AutoRest.Terraform.Templates
@using System.Collections.Generic
@using System.Diagnostics
@using System.Linq
@inherits TfProviderTemplateBase<(TfProviderField Field, string TargetFormat, Stack<IDictionary<string, string>> FieldDefs)>
@functions{
    private string GetFieldVariableName(TfProviderField field) => "p" + CodeNamer.GetAzureRmFieldLocalVarName(field);
    private string TypeToString(GoSDKTypeChain type, string format)
        => Include<GoSDKTypeChainToString, (GoSDKTypeChain, string)>((type, format));
    private string IncludeSelf(TfProviderField field)
        => Include<LoadFieldsDefSubTemplate, (TfProviderField, string, Stack<IDictionary<string, string>>)>(
            (field, null, Model.FieldDefs));
}
@{
    Debug.Assert(Model.Field != null && Model.FieldDefs != null && Model.FieldDefs.Count > 0);

    var definition = Model.FieldDefs.FirstOrDefault(def => def.ContainsKey(Model.Field.Parent.PropertyPath));
    if (!Model.Field.Parent.IsRoot && definition == null)
    {
@:@(IncludeSelf(Model.Field.Parent))
        definition = Model.FieldDefs.First(def => def.ContainsKey(Model.Field.Parent.PropertyPath));
    }

    var actualTargetFormat = Model.TargetFormat;
    if (string.IsNullOrEmpty(actualTargetFormat))
    {
        var fieldVarName = GetFieldVariableName(Model.Field);
        Model.FieldDefs.Peek().Add(Model.Field.PropertyPath, fieldVarName);
        actualTargetFormat = fieldVarName + " := {0}";
    }

    if (Model.Field.Parent.IsRoot)
    {
@:@(Indentation)@(string.Format(actualTargetFormat, $"d.Get(\"{Model.Field.Name}\")")).(@(TypeToString(Model.Field.GoType, "tf")))
    }
    else
    {
@:@(Indentation)@(string.Format(actualTargetFormat, $"{definition[Model.Field.Parent.PropertyPath]}[\"{Model.Field.Name}\"]")).(@(TypeToString(Model.Field.GoType, "tf")))
    }
}